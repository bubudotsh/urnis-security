#!/bin/bash

green=$(tput setaf 2)
red=$(tput setaf 1)
normal=$(tput sgr0)

BLEU='\033[0;34m'
LGREY='\033[0;37m'
NC='\033[0m'

sender=$(sudo grep mailsender /usr/share/urnis/src/urnis.conf | cut -c 13- | sed 's/"//g')
passw=$(sudo grep password /usr/share/urnis/src/urnis.conf | cut -c 10- | sed 's/"//g')
reciver=$(sudo grep mailreciver /usr/share/urnis/src/urnis.conf | cut -c 13- | sed 's/"//g')
tim=$(sudo grep timet /usr/share/urnis/src/urnis.conf | cut -c 7- | sed 's/"//g')
up=$(sudo grep aptupdate /usr/share/urnis/src/urnis.conf | cut -c 11- | sed 's/"//g')
date=$(date)
pathfilemail="/usr/share/urnis/data/audit"

pathaudit="/usr/share/urnis/data/audit"
pathlog="/usr/share/urnis/data/log"
pathreco="/usr/share/urnis/src/recommandation.txt"


helper () {
    echo -e "${LGREY}[ Urnis 1.0.0 ]${NC}\n\n"

    echo -e "   ${BLEU}Description${NC}"
    printf "       Urnis is a script that performs a security audit of your system.\n\n"

    echo -e "   ${BLEU}Usage${NC}"
    echo -e "       sudo urnis OPTION"

    echo -e "\n\n   ${BLEU}Option${NC}"
    printf "%-20s %-20s %s\n" "       OPTION" "NAME" "DESCRIPTION"
    printf "%-20s %-20s %s\n" "       -a" "audit" "make audit of your system"
    printf "%-20s %-20s %s\n" "       -h" "help" "usage of urnis"
    printf "%-20s %-20s %s\n" "       -u" "update" "update of Urnis"
    printf "%-20s %-20s %s\n" "       -l &" "look" "generation of an audit every 12 hours automatically"
    printf "%-20s %-20s %s\n" "       -m" "audit mail" "make audit of your system and send it by email"
    printf "%-20s %-20s %s\n" "       -r" "remove" "remove all files of urnis"
    printf "%-20s %-20s %s\n" "       -k" "kill look" "kill look mode process"
    printf "%-20s %-20s %s\n" "       -s" "status" "status of look mode"

    echo -e "\n\n   ${BLEU}Configuration${NC}"
    printf "%-41s %s\n" "       Configure mail" "/usr/share/urnis/src/urnis.conf"
    printf "%-41s %-20s %s\n" "       Add programs to check" "/usr/share/urnis/src/pro.txt"
    printf "%-41s %-20s %s\n" "       Add directories to check" "/usr/share/urnis/src/dir.txt"
    printf "%-41s %-20s %s\n" "       Enable apt update in look mode" "/usr/share/urnis/src/urnis.conf"


    echo -e "\n\n   ${BLEU}Author${NC}"
    printf "%-20s %s\n" "       github" "https://github.com/bubudotsh/urnis-secutity"
    printf "%-20s %s\n" "       developper" "BUNELIER Hugo"
    echo -e "\n"
}

maj () {
    if [ "${up}" = "enable" ]; then
        echo -e "\n\n${BLEU}[+] MAJ SYSTEM${NC}\n-----------------------------------\n"
        (sudo apt-get update -y && sudo apt-get upgrade -y && sudo apt update -y && sudo apt upgrade -y) > /usr/share/urnis/data/log-maj
        echo -e 'maj log aviable in /usr/share/urnis/data/log-maj \n'
    fi
}

user_empty_password () {
    echo -e "\n\n${BLEU}[+] USER EMPTY PASSWORD${NC}\n-----------------------------------\n"
    sleep 1
    printf "%-20s %s\n" "user empty pass:" "$(sudo getent shadow | grep ':!:' | cut -d: -f1 | wc -l)" >> ${pathaudit}
    sudo getent shadow | grep ':!:' | cut -d: -f1 
}

user_with_admin_right () {
    echo -e "\n\n${BLEU}[+] USER WITH ADMIN RIGHT${NC}\n-----------------------------------\n"
    sleep 0.5
    if [ -f "/etc/sudoers" ]; then
        printf "%-20s %s\n" "user admin right:" "$(sudo cat /etc/sudoers | grep '^%admin' | wc -l)" >> ${pathaudit}
        sudo cat /etc/sudoers | grep '^%admin'
    else
        echo "/etc/sudoers not found"
    fi
}

open_port () {
    echo -e "\n\n${BLEU}[+] OPEN PORT${NC}\n-----------------------------------\n"
    sleep 0.7
    if command -v netstat > /dev/null 2>&1; then
        printf "%-20s %s\n" "open port:" "$(sudo netstat -tulpn | wc -l)" >> ${pathaudit}
        sudo netstat -tulpn
    else
        echo "netstat not found"
    fi
}

admin_service () {
    echo -e "\n\n${BLEU}[+] ADMIN SERVICE${NC}\n-----------------------------------\n"
    sleep 1
    printf "%-20s %s\n" "admin service:" "$(sudo service --status-all | awk '{print $4}' | wc -l)" >> ${pathaudit}
    sudo service --status-all | awk '{print $4}'
}

firewall () {
    echo -e "\n\n${BLEU}[+] FIREWALL${NC}\n-----------------------------------\n"
    sleep 0.5
    if command -v ufw > /dev/null 2>&1; then
        echo -e "$(sudo ufw status)" 2>&1 | tee -a ${pathaudit}
        if [ "$(sudo ufw status)" =  "Status: inactive" || "$(sudo ufw status)" =  "Ã‰tat : inactif" ]; then
            echo -e "* Active ufw" >> ${pathreco}
    else
        echo "ufw not found" 2>&1 | tee -a ${pathaudit}
    fi

    if command -v iptables > /dev/null 2>&1; then
        iptablesst=$(sudo iptables -L | grep INPUT)
        if [ "${iptablesst}" = "Chain INPUT (policy ACCEPT)" ];then
            printf "%-40s %s\n" " iptables INPUT" "${red}ACCES${normal}" 2>&1 | tee -a ${pathaudit}
            echo -e "* Switch to DROP and create yours ruls" >> ${pathreco}
        elif [ "${iptablesst}" = "Chain INPUT (policy DROP)" ]; then
            printf "%-40s %s\n" " iptables INPUT" "${green}DROP${normal}" 2>&1 | tee -a ${pathaudit}
        else
            printf "%-40s %s\n" " iptables INPUT" "${green}CUSTOM${normal}" 2>&1 | tee -a ${pathaudit}
        fi
    else
        echo "iptables not found" 2>&1 | tee -a ${pathaudit}
    fi
}

scan () {
    echo -e "\n\n${BLEU}[+] SCAN FILES${NC}\n-----------------------------------\n"
    echo -e "Scan directories file...\n"
    total_file=0
    suspect_file=0
    hashfile="/usr/share/urnis/src/MD5Hahses.txt"
    file_path="/usr/share/urnis/src/dir.txt"
    while read -r line; do
        if [ -d "$line" ]; then
            printf "%-20s %s\n" "   $line" "${green}FOUND${normal}"
            if [ ! -f "$hashfile" ]; then
                echo "Hash file list not found"
                exit 1
            fi
            for file in "$line"/*; do
                if [ -d "$file" ]; then
                    echo -n
                else
                    file_hash=$(md5sum "$file" | cut -d' ' -f1)
                    match=$(grep "$file_hash" "$hashfile")
                    if [ -z "$match" ]; then
                        ((total_file=total_file+1))
                    else
                        printf "%-60s %s\n" " $file" "${red}SUSPECT${normal}" >> ${pathlog} 2>> ${pathlog}
                        echo -e "* Check $file possibility of malware" >> ${pathreco}
                        ((suspect_file=suspect_file+1))
                    fi
                fi
            done
        else
            printf "%-20s %s\n" "   $line" "${red}NOT FOUND${normal}"
            
        fi
    done < "$file_path"
    ((total_file=total_file+suspect_file))
    echo -e "suspect files:        $suspect_file" >> ${pathaudit}
    echo -e "total files:          $total_file" >> ${pathaudit}
}

os_detections() {
    echo -e "${BLEU}[+] OS detections${NC}\n-----------------------------------\n"
    sleep 0.5
    printf "%-20s %s\n" "System" "$(egrep '^(NAME)=' /etc/os-release | cut -c 7- | sed 's/"//g')" 2>&1 | sudo tee -a ${pathaudit}
    printf "%-20s %s\n" "System version" "$(egrep '^(VERSION)=' /etc/os-release | cut -c 9- | sed 's/"//g')" 2>&1 | sudo tee -a ${pathaudit}
    printf "%-20s %s\n" "cpu" "$(cat /proc/cpuinfo | grep -i "^model name" | awk -F": " '{print $2}' | head -1 | sudo sed 's/ \+/ /g')" 2>&1 | tee -a ${pathaudit}
    printf "%-20s %s\n" "Number of cpu" "$(cat /proc/cpuinfo | grep processor | wc -l)" 2>&1 | tee -a ${pathaudit}
    printf "%-20s %s\n" "RAM" "$(grep MemTotal /proc/meminfo | awk -F": " '{print $2}' | sed 's/ //g')" 2>&1 | sudo tee -a ${pathaudit}
}

prog () {
    echo -e "\n\n${BLEU}[+] RECOMANDED PROGRAMS${NC}\n-----------------------------------\n"
    sleep 0.7
    file_path="/usr/share/urnis/src/pro.txt"
    while read -r line; do
        if command -v $line > /dev/null 2>&1; then
            printf "%-20s %s\n" "$line" "${green}FOUND${normal}"
        else
            printf "%-20s %s\n" "$line" "${red}NOT FOUND${normal}"
            echo -e "* Install ${line}" >> ${pathreco}
        fi
    done < "$file_path"
}

info () {
    echo "==================================================================================="
    echo -e "Urniscomes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to redistribute it under the terms of the GNU General
Public License.\n"
    printf "%-10s %s\n" "Creator:" "BUNELIER Hugo"
    printf "%-10s %s\n" "GitHub:" "https://github.com/bubudotsh/urnis-security"
    printf "%-10s %s\n" "Update:" "please check the update on the project's git hub for new functionality"
    echo -e "===================================================================================\n\n"
}

last_login () {
    echo -e "\n\n${BLEU}[+] LAST SSH LOGIN${NC}\n-----------------------------------\n"
    sleep 1
    sudo last -5
}

bootinfo () {
    echo -e "\n\n${BLEU}[+] BOOT INFO${NC}\n-----------------------------------\n"
    sleep 0.7
    securebot=$(mokutil --sb-state)
    bootefi=$(ls /sys/firmware/efi > /dev/null 2> /dev/null ; echo "$?")
    if [ "$securebot" = "SecureBoot disabled" ]; then
        printf "%-20s %s\n" "Secure Boot" "${red}DISABLE${normal}"
        echo -e "* Active secure boot" >> ${pathreco}
    elif [ "$securebot" = "SecureBoot enabled" ];then
        printf "%-20s %s\n" "Secure Boot" "${green}ENABLED${normal}"
    else
        echo "${securebot}"
    fi
    if [ "$bootefi" = "0" ]; then
        printf "%-20s %s\n" "efi boot" "${green}ENABLED${normal}"
    else
        printf "%-20s %s\n" "efi boot" "${red}DISABLE${normal}"
    fi
}

reco () {
    echo -e "\n\n${BLEU}[+] RECOMMANDATION${NC}\n-----------------------------------\n"
    sudo cat /usr/share/urnis/data/recommandation.txt
}


audit () {
    echo -e "${LGREY}[ Urnis 1.0.0 ]${NC}\n\n"
    echo -e "[ Urnis 1.0.0 ]\n\n" > ${pathaudit}
    info
    sleep 2
    echo -e "---------------------------------------" >>${pathaudit}
    os_detections
    bootinfo
    echo -e "---------------------------------------" >> ${pathaudit}
    prog
    user_empty_password
    user_with_admin_right
    open_port
    admin_service
    firewall
    echo -e "---------------------------------------" >>${pathaudit}
    last_login
    scan
    reco
    echo -e "---------------------------------------" >> ${pathaudit}
    echo -e "\n\n${BLEU}[+] SOURCES${NC}\n-----------------------------------\n"
    printf "%-20s %s\n" "maj log:" "/usr/share/urnis/data/log-maj" 2>&1 | tee -a ${pathaudit}
    printf "%-20s %s\n" "scan log:" "${pathlog}" 2>&1 | tee -a ${pathaudit}
    printf "%-20s %s\n" "result scan:" "${pathaudit}" 2>&1 | tee -a ${pathaudit}
    echo -e "---------------------------------------" >> ${pathaudit}
    echo -e "${date}" >> ${pathaudit}
    echo -e "\n\n${BLEU}[+] RESULT${NC}\n-----------------------------------\n"
    cat ${pathaudit}
}

look () {
    maj
    timm=$(($tim * 3600))
    while true; do
        sudo sed -i -e 's/urnislstatus="0"/urnislstatus="1"/g' /usr/share/urnis/src/urnis.conf
        audit > ${pathlog}
        sudo python3 /usr/share/urnis/src/mailsender.py ${sender} ${passw} ${reciver} ${pathfilemail}
        sleep $timm
    done
}

remove () {
    echo "Are you sure you want to remove [y/n]"
    read remove_rep
    if [ "$remove_rep" = "y" ]; then
        sudo rm -fr /usr/share/urnis
        echo -e "remove sucessfully"
        sudo rm -fr /usr/sbin/urnis
    fi
}

kills () {
    sudo ps -a | grep 'urnis' | awk '{print $1}' > /usr/share/urnis/data/ki.txt
    file_path="/usr/share/urnis/data/ki.txt"
    while read -r line; do
        sudo kill -9 $line
    done < "$file_path"
    sudo rm -fr /usr/share/urnis/data/ki.txt
    sudo sed -i -e 's/urnislstatus="1"/urnislstatus="0"/g' /usr/share/urnis/src/urnis.conf
}

update () {
    echo "For update you can execute sudo urnis -r"
    echo "git clone https://github.com/bubudotsh/urnis-security.git"
    echo "run setup.sh and reconfigure urnis"
}

status () {
    echo -e "\n\n${BLEU}[+] URNIS LOOK STATUS${NC}\n-----------------------------------\n"
    lookstatus=$(grep urnislstatus /usr/share/urnis/src/urnis.conf | cut -c 14- | sed 's/"//g')
    if [ "${lookstatus}" = "0" ]; then
        echo "NOT RUN"
    elif [ "${lookstatus}" = "1" ];then
        echo "RUNNING"
    else
        echo "error"
    fi
}

while getopts "huamlrks" option; do
case $option in
    h)
        helper
        exit;;
    u)
        update
        exit;;
    a)
        audit 2>&1 | tee ${pathlog}
        exit;;
    m)
        audit 2>&1 | tee ${pathlog}
        sudo python3 /usr/share/urnis/src/mailsender.py ${sender} ${passw} ${reciver} ${pathfilemail}
        exit;;
    l)
        look > /dev/null 2> /dev/null
        exit;;
    k)
        kills
        exit;;
    r)
        remove
        exit;;
    s)
        status
        exit;;
    \?)
        echo "bad option, help : -h"
        exit;;
    esac
done
echo "bad option, try sudo urnis -h"